const isPlainValue = v => ([ 'string', 'number', 'boolean' ].includes(typeof v));const wasChanged = (v1, v2) => (v1 !== v2);export function set(Store) {  return object => {    if (!object) return;    Object.keys(object).forEach(key => {      const previousValue = Store.objects.observables[key];      const previousValueClone = Array.isArray(previousValue)        ? [ ...previousValue ]        : typeof previousValue === 'object'          ? { ...previousValue }          : previousValue;      const nextValue = typeof object[key] === 'function'        ? object[key](previousValueClone)        : object[key];      if (typeof previousValue !== typeof nextValue) {        console.warn(`Type does not match previous type in ${key}`);      } else {        const shouldNotify = !isPlainValue(nextValue) ||          (isPlainValue(nextValue) && wasChanged(previousValue, nextValue));        if (shouldNotify) {          Store.objects.observables[key] = nextValue;          Store.methods.notify(key);        }      }    });  };}
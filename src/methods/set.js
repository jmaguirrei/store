const isPlainValue = v => ([ 'string', 'number', 'boolean' ].includes(typeof v));const wasChanged = (v1, v2) => (v1 !== v2);export function set(Store) {  return object => {    Object.keys(object).forEach(observable => {      const previousValue = Store.objects.observables[observable];      const nextValue = object[observable];      if (typeof previousValue !== typeof nextValue) {        console.warn(`Type does not match previous type in ${observable}`);      } else {        const shouldNotify = !isPlainValue(nextValue) ||          (isPlainValue(nextValue) && wasChanged(previousValue, nextValue));        if (shouldNotify) {          Store.objects.observables[observable] = object[observable];          Store.methods.notify(observable);        }      }    });  };}
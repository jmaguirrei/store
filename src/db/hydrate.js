function getCurrentAttrs(attrs) {  return attrs.reduce((acum, item) => {    const { key, value, timestamp } = item;    /*      value:        is always what is displayed at the UI, used in calculations, etc.        can be in 2 status      status:        0: value is "optimistic" and has not been validated yet by the server        1: value coherent with the server initial load,        2: optimistic value that was confirmed by the server        3: value that came from the server through web-sockets      dbValue:        is the last value that was confirmed by the server        if null indicates that the whole record is not confirmed yet      timestamp:        is the timestamp that reflects the last status coming from the server    */    if (!acum[key]) acum[key] = { value, dbValue: value, status: 1, timestamp };    return {      ...acum,      [key]: timestamp > acum[key].timestamp        ? { value, dbValue: value, status: 1, timestamp }        : acum[key],    };  }, {});}export function hydrate(Store) {  return data => {    if (data.length > 0) {      Store.db.data = data.reduce((acum, item) => {        const { _id, domain, attrs } = item;        if (!acum[domain]) acum[domain] = [];        return {          ...acum,          [domain]: [            ...acum[domain],            {              _id,              attrs: getCurrentAttrs(attrs),            },          ],        };      }, {});      // Renders the defaultComponent (Container)      if (Store.flags.IS_MOUNTED) Store.methods.render();    }  };}
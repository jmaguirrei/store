import * as utils from '../utils';import * as methods from '../methods';import * as queue from '../queue';const isProduction = process.env.NODE_ENV !== 'production';const isBrowser = process.browser;export function createStore(definition, renderer) {  const Store = {};  const {    observables = {},    computed = {},    actions = {},  } = definition;  /* ----------------------------------------------------------------------------------------------    Attach utils to the store for convenience.  ---------------------------------------------------------------------------------------------- */  Store.utils = {    hoc: null, // will be attached after initialization    ...utils,  };  /* ----------------------------------------------------------------------------------------------    Initialize observables  ---------------------------------------------------------------------------------------------- */  Store.objects = {    defaultComponent: null,    observables,    computed,    listeners: [],    reactions: [],    components: {},  };  /* ----------------------------------------------------------------------------------------------    Initialize methods  ---------------------------------------------------------------------------------------------- */  Store.methods = {    get: methods.get(Store),    subscribe: methods.subscribe(Store),    set: methods.set(Store),    setItem: methods.setItem(Store),    toggle: methods.toggle(Store),    notify: methods.notify(Store),    emit: methods.emit(Store),    on: methods.on(Store),    once: methods.once(Store),    render: methods.render(Store, renderer),    compute: methods.compute(Store),    computeAll: methods.computeAll(Store),    registerComponent: methods.registerComponent(Store),  };  /* ----------------------------------------------------------------------------------------------    Initialize queued processes  ---------------------------------------------------------------------------------------------- */  Store.process = {    queue: [],    addToQueue: queue.addToQueue(Store),    processor: queue.processor(Store),    runTask: queue.runTask(Store),    call: queue.createProcesses(Store, actions), // client side method call  };  /* ----------------------------------------------------------------------------------------------    Initialize flags  ---------------------------------------------------------------------------------------------- */  Store.flags = {};  /* ----------------------------------------------------------------------------------------------    Initialize listeners  ---------------------------------------------------------------------------------------------- */  Object.keys(Store.objects.observables).forEach(observable => {    Store.objects.listeners.push({ observable, components: [] });  });  /* ----------------------------------------------------------------------------------------------    Start with computed values up to date  ---------------------------------------------------------------------------------------------- */  Store.methods.computeAll();  /* ----------------------------------------------------------------------------------------------    The best log  ---------------------------------------------------------------------------------------------- */  if (isBrowser && !isProduction) window.Store = Store;  return Store;}
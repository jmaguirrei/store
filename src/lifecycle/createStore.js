import * as methods from '../methods';import * as queue from '../queue';export function createStore(definition, renderer) {  const Store = {};  const {    observables = {},    computed = {},    actions = {},    alerts = {},    checks = {},  } = definition;  /* ----------------------------------------------------------------------------------------------    Initialize flags  ---------------------------------------------------------------------------------------------- */  Store.flags = {    IS_MOUNTED: false,  };  /* ----------------------------------------------------------------------------------------------    Initialize utils to the store for convenience.  ---------------------------------------------------------------------------------------------- */  Store.utils = {    hoc: null, // will be attached after ui initialization  };  /* ----------------------------------------------------------------------------------------------    Initialize observables  ---------------------------------------------------------------------------------------------- */  Store.objects = {    defaultComponent: null,    observables,    computed,    listeners: [],    reactions: [],    components: {},    alerts: [],  };  /* ----------------------------------------------------------------------------------------------    Initialize methods  ---------------------------------------------------------------------------------------------- */  Store.methods = {    check: methods.check(Store, checks),    get: methods.get(Store),    subscribe: methods.subscribe(Store),    set: methods.set(Store),    setItem: methods.setItem(Store),    toggle: methods.toggle(Store),    notify: methods.notify(Store),    emit: methods.emit(Store),    on: methods.on(Store),    once: methods.once(Store),    render: methods.render(Store, renderer),    compute: methods.compute(Store),    computeAll: methods.computeAll(Store),    registerComponent: methods.registerComponent(Store),    alertOn: methods.alertOn(Store, alerts),    alertOff: methods.alertOff(Store),    callServerMethod: () => undefined, // will be initialized on 'connectStoreToServer'  };  /* ----------------------------------------------------------------------------------------------    Initialize queued processes  ---------------------------------------------------------------------------------------------- */  Store.process = {    queue: [],    addToQueue: queue.addToQueue(Store),    processor: queue.processor(Store),    runTask: queue.runTask(Store),    call: queue.createProcesses(Store, actions), // client side method call  };  /* ----------------------------------------------------------------------------------------------    Initialize listeners  ---------------------------------------------------------------------------------------------- */  Object.keys(Store.objects.observables).forEach(observable => {    Store.objects.listeners.push({ observable, components: [] });  });  /* ----------------------------------------------------------------------------------------------    Start with computed values up to date  ---------------------------------------------------------------------------------------------- */  Store.methods.computeAll();  return Store;}